defmodule :"Elixir.Dbk.Repo.Migrations.Added variables, values and join table" do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_sqlite.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:variables, primary_key: false) do
      add :text, :text
      add :variable_id, :text
      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:variables, [:variable_id], name: "variables_unique_variable_index")

    create table(:values, primary_key: false) do
      add :variable_id,
          references(:variables,
            column: :id,
            name: "values_variable_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :text, :text
      add :value_id, :text
      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:values, [:value_id, :variable_id], name: "values_unique_value_index")

    # alter table(:tables) do
    # Attribute removal has been commented out to avoid data loss. See the migration generator documentation for more
    # If you uncomment this, be sure to also uncomment the corresponding attribute *addition* in the `down` migration
    # remove :variables
    # end
    # 
    create unique_index(:tables, [:id], name: "tables_id_index")

    create table(:table_variables, primary_key: false) do
      add :variable_id,
          references(:variables,
            column: :id,
            name: "table_variables_variable_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :table_id,
          references(:tables,
            column: :id,
            name: "table_variables_table_id_fkey",
            type: :text,
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :time, :boolean
      add :elimination, :boolean
      add :order, :bigint
      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:table_variables, [:table_id, :variable_id],
             name: "table_variables_unique_table_variable_index"
           )
  end

  def down do
    drop_if_exists unique_index(:table_variables, [:table_id, :variable_id],
                     name: "table_variables_unique_table_variable_index"
                   )

    drop constraint(:table_variables, "table_variables_table_id_fkey")

    drop constraint(:table_variables, "table_variables_variable_id_fkey")

    drop table(:table_variables)

    drop_if_exists unique_index(:tables, [:id], name: "tables_id_index")

    # alter table(:tables) do
    # This is the `down` migration of the statement:
    #
    #     remove :variables
    #
    # 
    # add :variables, {:array, :text}
    # end
    # 
    drop_if_exists unique_index(:values, [:value_id, :variable_id],
                     name: "values_unique_value_index"
                   )

    drop constraint(:values, "values_variable_id_fkey")

    drop table(:values)

    drop_if_exists unique_index(:variables, [:variable_id],
                     name: "variables_unique_variable_index"
                   )

    drop table(:variables)
  end
end