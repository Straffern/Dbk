defmodule Dbk.Repo.Migrations.Init do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_sqlite.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:variables, primary_key: false) do
      add :time, :boolean
      add :elimination, :boolean
      add :order, :bigint
      add :text, :text
      add :variable_id, :text
      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:variables, [:variable_id], name: "variables_unique_variable_index")

    create table(:values, primary_key: false) do
      add :variable_id,
          references(:variables,
            column: :id,
            name: "values_variable_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :text, :text
      add :value_id, :text
      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:values, [:value_id, :variable_id], name: "values_unique_value_index")

    create table(:users, primary_key: false) do
      add :email, :citext, null: false
      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :updated_at, :utc_datetime_usec, null: false
      add :created_at, :utc_datetime_usec, null: false
      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:tables, primary_key: false) do
      add :subject_id,
          references(:subjects,
            column: :id,
            name: "tables_subject_id_fkey",
            type: :bigint,
            on_delete: :delete_all
          )

      add :active, :boolean, null: false
      add :latest_period, :text
      add :first_period, :text
      add :updated, :utc_datetime
      add :unit, :text
      add :text, :text, null: false
      add :id, :text, null: false, primary_key: true
    end

    create table(:table_variables, primary_key: false) do
      add :variable_id,
          references(:variables,
            column: :id,
            name: "table_variables_variable_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :table_id,
          references(:tables,
            column: :id,
            name: "table_variables_table_id_fkey",
            type: :text,
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :id, :uuid, null: false, primary_key: true
    end

    create unique_index(:table_variables, [:table_id, :variable_id],
             name: "table_variables_unique_table_variable_index"
           )

    create table(:subjects, primary_key: false) do
      add :parent_id,
          references(:subjects,
            column: :id,
            name: "subjects_parent_id_fkey",
            type: :bigint,
            on_delete: :delete_all
          )

      add :has_subjects, :boolean
      add :active, :boolean
      add :description, :text, null: false
      add :id, :bigint, null: false, primary_key: true
    end

    create unique_index(:tables, [:id], name: "tables_id_index")

    create unique_index(:subjects, [:id], name: "subjects_id_index")
  end

  def down do
    drop_if_exists unique_index(:subjects, [:id], name: "subjects_id_index")

    drop_if_exists unique_index(:tables, [:id], name: "tables_id_index")

    drop constraint(:subjects, "subjects_parent_id_fkey")

    drop table(:subjects)

    drop_if_exists unique_index(:table_variables, [:table_id, :variable_id],
                     name: "table_variables_unique_table_variable_index"
                   )

    drop constraint(:table_variables, "table_variables_table_id_fkey")

    drop constraint(:table_variables, "table_variables_variable_id_fkey")

    drop table(:table_variables)

    drop constraint(:tables, "tables_subject_id_fkey")

    drop table(:tables)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)

    drop_if_exists unique_index(:values, [:value_id, :variable_id],
                     name: "values_unique_value_index"
                   )

    drop constraint(:values, "values_variable_id_fkey")

    drop table(:values)

    drop_if_exists unique_index(:variables, [:variable_id],
                     name: "variables_unique_variable_index"
                   )

    drop table(:variables)
  end
end